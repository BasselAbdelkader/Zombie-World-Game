
The experience of working with this engine.

The game engine used in the task is not very easy to use, but in the end I was able to understand how it works.
Most of the engine is fairly easy to understand, although some parts are difficult.  Especially classes as ActorLocations with hash maps <Location, Actor> and <Actor, Location>.
	The class ActorLocations is used in the GameMap class. I spent a lot of time trying to figure out how the “actorLocations” attribute is initialized. There is no initialization in the constructor and there is no setter for this attribute. I finally discovered that it is initialized using the usual assignment in the World class:
gameMap.actorLocations = actorLocations;
The Game Engine package should be used as an external library without making any changes to its code. Only public methods must be used. When creating a new game using this game engine, the developer should not make any changes to the engine. But when making the assignment I couldn't follow this rule.
When I was doing the third task I couldn't find a way to avoid changing the game engine.
For example, I needed to add the quit option in the menu. To implement this, I had to create a new action: “QuitAction” and manually add it to the player options in the “processActorTurn” method. 
To finish the game, I discovered that the easiest way was to kill the player. I think there must be the quit option as a part of the engine.
The second problem I encountered was the game ending due to a condition. For example, when all the humans are killed or all the zombies are vanished. And again, I had to make changes in the World class, in the “stillRunning” method.
The should be the possibility of defining conditions for the game win or game loss somewhere in the game engine.
The third problem was the days counting. Adding the voodoo, Mambo Marie I needed to know the current day. Voodoo behaviour depends on the time, so it would be comfortable to have the possibility to know the number of the day.
The fourth problem was the presence of an actor who is not on the map now. Voodoo lives off the map and appears at a random moment. 
The game engine doesn’t maintain this feature because each actor must be somewhere on the map.
Despite all of the above, the game engine offers vast possibilities for creating games of various kinds.
Working with it gave me a lot of experience in game development. I knew many new ways to write professional code.



I will write about the parts of the engine I am most familiar with, the tasks I have been assigned have largely been related to implementing and extending Weapons and Actions.

    Existing implementation for Weapons lacked a straight forward way to retrieve hit chances for the various weapons, leaving that stored locally in AttackAction. While fine for simple weapons, it is troublesome for more complex weapons with conditional hit chances. I propose WeaponItem be refactored to have a hitchance() method that returns the hit chance of the weapon, the hit chance could be initialized during instantiation or calculated conditionally as Sniper Rifle does. This way AttackAction can be simplified to retrieve hit chance from the weapon itself in addition to the name, damage and verb which it already does. In addition, actors currently use whichever Weapon they first pick up, and do not switch to another unless they drop it. I suggest an active weapon attribute be added to Actor to store their active weapon, this attribute will have a setter used by actions before calling getWeapon() and damaging the target. Then if an active weapon has not been set, getWeapon() can then either fallback to the current implementation or in my opinion just call and return IntrinsicWapon()
    
    Another area I think could be improved is access to the Display class. Currently only the actor's playTurn method receives a reference to the game display. I have chosen to expose this in the Player class by storing it in an attribute and providing a getter for it. I suggest refactoring Actor to contain a reference to the game display, then I could avoid downcasting actor to Player each time I want to print to the game display. While I admit this is not the cleanest solution, as we would be printing to the display from many different parts of the system, this may be the easiest to understand from a code readability standpoint, especially for actions that last multiple turns.
    
    I think that the allowableActions attribute and methods for it are well implemented and easy to design features around. Access to allowableActions is properly implemented, no outside classes can modify it without going through guard code in Actions class. The only downside I see is that when an Actor is standing on a location containing an item, the action to pick it up and any actions in it's allowableActions are presented to the Player at the same time. While this can easily be worked around, using tick(Location, Actor), it can also be viewed as an upside since it allows interaction with the current location, such as a vehicle item that transports the actor to another map. This aspect of Item is reusable for many different types of features.
