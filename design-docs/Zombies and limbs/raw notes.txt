A --> B strong association
A holds an attribute containing class B
can be numbered on each side
arrow may not be present if both sides know about each other

A <|-- B generalisation
B inherits from A

A - - -> B dependency
A uses a method in B, including instantiation
usually only single direction 

to beat up zombies:
modify Zombie
modify AttackAction
new class CraftItemAction
new class ZombieMace
new class ZombieClub
new class ZombieArm
new class ZombieLeg
new class ZombieMace
new class ZombieClub
new class CraftItemAction

ZombieArm/ZombieLeg/ZombieMace/ZombieClub
    subclass of WeaponItem
    dependency of Application
    association with CraftItemAction

CraftItemAction
    subclass of Action

new class CraftItemAction extends Action
    constructor(item)
        this.item = item
    execute(actor, map)
        if actor is player
            remove current item from actor inventory
            add crafted item to actor inventory
            return menuDescription(actor)
    menuDescription(actor)
        return "craft zombie arm/leg into mace/club"
    
new class ZombieArm extends WeaponItem
    public ZombieArm()
        super(name, icon, damage, verb)
        allowableActions.add(new CraftItemAction(this))

To implement using zombie limbs as weapons and crafting them into better weapons as a player the following new classes were created:
ZombieArm, ZombieLeg, ZombieMace, ZombieClub and CraftItemAction

CraftItemAction is a new Action that gets created and stored in the allowableActions attribute of a ZombieArm/Leg when one is created.
It is intended that an option for the player to execute this action is added to their menu when a ZombieArm/Leg is in their inventory, thus crafting the arm/leg into a mace/club

Zombie arms/legs can be picked up by any other actors, but can only be crafted by the player, the execute method will do nothing unless the actor is a player.

modify Zombie
    add private attribute arms
    add private attribute legs
    add private attribute skippedTurn = false
    
    add getters for arms and legs(depended by AttackAction)
    
    modify IntrinsicWeapon
        if 50% chance to bite
            return IntrinsicWeapon bites
        else
            return IntrinsicWeapon punches
    
    modify playTurn
        if choose HuntBehaviour
            if two legs return behaviour.getAction
            if one leg
                if skippedTurn
                    return behaviour.getAction
                else skippedTurn = true
            else
                return doNothing

Zombie class modified to have limbs and act according to their number of limbs.
- add private attributes for arms and legs
- add private attribute skippedTurn to track if zombie skipped moving in the previous turn
- add getters for the arms and legs attributes for AttackAction class to use.
- modify IntrinsicWeapon method to return a bite weapon 50% of the time
- modify playTurn method such that when HuntBehaviour is the chosen behaviour, we check the number of legs, if 2 legs then move normally, if 1 leg then only move if skippedTurn is true(set skippedTurn flag accordingly), if 0 legs then DoNothingAction
    
modify execute method in AttackAction
    if target hasCapability undead
        if 25% chance remove one limb
            check has limbs
            choose limb to remove
            new ZombieLimb
            map.locationOf(target).addItem(ZombieLimb)
        if one arm 50% chance drop weapon
        if no arms drop weapon
    if actor hasCapability undead
        if does not have weapon
            check current location for weapon
            if found
                if can wield(has arms)
                pickup weapon
        if weapon.verb() == "bites"
            heal actor
        damage target
        if 10% chance say brains

execute method in AttackAction modified to handle zombie limb dropping and attacking with weapon.
- zombies drop limbs when they are the target of an attack and the attack is successful, dropping limbs according to the chances specified(if they have limbs left to drop, checked using getters from modified Zombie class).
- attacking zombies check for a weapon at their current location, add it to their inventory before attacking with it.
- if the attack is a bite, the zombie is healed
zombie has 10% chance to add another line to the return variable result, "\n braaaaains".


